{"version":3,"sources":["components/CovidGoogleMap.js","components/PatientInfo.js","components/CovidMap.js","components/ListPatients.js","components/your-local-slider-components.js","components/Slider.js","components/CovidDashboard.js","components/Nav.js","components/ChartVN.js","components/Charttotal.js","components/Stats.js","App.js","serviceWorker.js","index.js"],"names":["React","memo","onPatientMarkerClicked","console","log","useState","patients","setPatients","useEffect","fetch","then","res","json","result","data","error","MyMapComponent","compose","withProps","googleMapURL","loadingElement","style","height","containerElement","mapElement","withScriptjs","withGoogleMap","props","defaultZoom","defaultCenter","lat","lng","map","patient","index","key","position","onClick","PatientInfo","name","address","note","verifyDate","class","Card","width","Header","Body","Title","Text","CovidMap","currentPatient","Map","center","zoom","TileLayer","attribution","url","Marker","Popup","ListPatients","onClickItemPatient","refs","indexClickedMaker","ListGroup","as","Item","ref","active","railOuterStyle","transform","cursor","railInnerStyle","borderRadius","pointerEvents","backgroundColor","SliderRail","getRailProps","Handle","domain","min","max","handle","id","value","percent","disabled","getHandleProps","left","WebkitTapHighlightColor","zIndex","role","aria-valuemin","aria-valuemax","aria-valuenow","boxShadow","Tick","tick","count","format","marginTop","fontSize","textAlign","fontFamily","marginLeft","defaultProps","d","sliderStyle","today","startOfToday","constantDay","Date","formatTick","ms","SliderDate","onChangeSlider","addDaySelected","values","SetValues","setSelected","isPlay","setIsPlay","timer","getTime","setInterval","addDays","selected","clearInterval","dateTicks","scaleTime","ticks","margin","rootStyle","mode","step","onChange","date","handles","length","Row","Col","xs","Button","variant","setScrollList","current","scrollIntoView","behavior","block","CovidDashboard","setCurrentPatient","indexPatientClicked","setIndexPatientClicked","selectedDate","setSelectedDate","listPatientSelected","reduce","acc","createRef","patien","concat","Container","Slider","undefined","Nav","navStyle","color","className","to","ChartVN","listDate","setlistDate","arrKeys","Object","keys","options","responsive","labels","datasets","label","borderColor","fill","Charttotal","Stats","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6SA4CeA,IAAMC,MAxCE,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,uBACrBC,QAAQC,IAAI,+BADqC,MAEjBC,mBAAS,IAFQ,mBAE1CC,EAF0C,KAEhCC,EAFgC,KAGjDC,qBAAU,WACNC,MAAM,2DACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGN,EAAYM,EAAOC,SAKvB,SAACC,SAKV,IACH,IAAMC,EAAiBhB,IAAMC,KAAKgB,YAC9BC,YAAU,CACNC,aACI,wHACJC,eAAgB,yBAAKC,MAAO,CAACC,OAAO,UACpCC,iBAAkB,yBAAKF,MAAO,CAACC,OAAO,WACtCE,WAAY,yBAAKH,MAAO,CAACC,OAAO,YAEpCG,eACAC,gBAT8BT,EAUhC,SAACU,GAAD,OACE,kBAAC,YAAD,CAAWC,YAAa,GAAIC,cAAe,CAACC,IAAK,UAAWC,IAAK,cAC5DzB,EAAS0B,KAAI,SAACC,EAASC,GAAV,OAAqB,kBAAC,SAAD,CAAQC,IAAKD,EAAOE,SAAU,CAACN,IAAKG,EAAQH,IAAKC,IAAKE,EAAQF,KAAMM,QAAS,WAC5GnC,EAAuB+B,cAMnC,OAAO,kBAACjB,EAAD,S,OCpBIsB,EAlBK,SAAC,GAAuC,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WACvC,OAAO,yBAAKC,MAAQ,aACpB,kBAACC,EAAA,EAAD,CAAMvB,MAAO,CAAEwB,MAAO,UACtB,kBAACD,EAAA,EAAKE,OAAN,KAAa,6EACb,kBAACF,EAAA,EAAKG,KAAN,KACA,kBAACH,EAAA,EAAKI,MAAN,mCAA6BT,GAC3B,kBAACK,EAAA,EAAKK,KAAN,KACE,4BACI,4BAAKT,GACL,4BAAKC,GACL,4BAAKC,S,6CCWFQ,EAtBE,SAAC,GAAsD,IAArDhD,EAAoD,EAApDA,uBAAuBI,EAA6B,EAA7BA,SAAS6C,EAAoB,EAApBA,eAI/C,OAAO,kBAACC,EAAA,EAAD,CAAKC,OAAQ,CAACF,EAAiBA,EAAerB,IAFpC,UAEqDqB,EAAiBA,EAAepB,IADrF,aACwGuB,KAHvG,GAId,kBAACC,EAAA,EAAD,CACIC,YAAY,0EACZC,IAAI,gDAEPnD,EAAS0B,KAAI,SAACC,EAAQC,GAAT,OAAmB,kBAACwB,EAAA,EAAD,CAAQtB,SAAU,CAACH,EAAQH,IAAKG,EAAQF,KAAMM,QAAS,WAAOnC,EAAuB+B,EAAQC,KAC1H,kBAACyB,EAAA,EAAD,KACI,4BACI,qCAAW1B,EAAQM,MACnB,wCAAcN,EAAQO,SACtB,qCAAWP,EAAQQ,MACnB,4CAAkBR,EAAQS,oB,SCI/BkB,EAnBM,SAAC,GAAyD,IAAxDtD,EAAuD,EAAvDA,SAASuD,EAA8C,EAA9CA,mBAAmBC,EAA2B,EAA3BA,KAAKC,EAAsB,EAAtBA,kBACpD,OAAO,kBAACC,EAAA,EAAD,CAAWrB,MAAQ,aAAasB,GAAK,MAC3C3D,GAAYA,EAAS0B,KAAI,SAACC,EAAQC,GAC/B,OACA,kBAAC8B,EAAA,EAAUE,KAAX,CAAgB/B,IAAOD,EAAO+B,GAAK,KAAKE,IAAKL,EAAK5B,GAAQG,QAAW,WACjEwB,EAAmB5B,EAAQC,IAC5BkC,OAAUlC,IAAU6B,GAAkC,4BACrD,4BAAK9B,EAAQM,MACb,4BAAKN,EAAQO,SACb,4BAAKP,EAAQQ,MACb,4BAAKR,EAAQS,mB,SCVnB2B,EAAiB,CACnBjC,SAAU,WACVS,MAAO,OACPvB,OAAQ,GACRgD,UAAW,sBACXC,OAAQ,WAIJC,EAAiB,CACrBpC,SAAU,WACVS,MAAO,OACPvB,OAAQ,EACRgD,UAAW,sBACXG,aAAc,EACdC,cAAe,OACfC,gBAAiB,oBAGZ,SAASC,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,aAC3B,OACE,kBAAC,WAAD,KACE,uCAAKxD,MAAOgD,GAAoBQ,MAChC,yBAAKxD,MAAOmD,KASX,SAASM,EAAT,GAKH,IAAD,gBAJDC,OAIC,GAJQC,EAIR,KAJaC,EAIb,SAHDC,OAAUC,EAGT,EAHSA,GAAIC,EAGb,EAHaA,MAAOC,EAGpB,EAHoBA,QACrBC,EAEC,EAFDA,SACAC,EACC,EADDA,eAEA,OACE,kBAAC,WAAD,KACE,uCACElE,MAAO,CACLmE,KAAK,GAAD,OAAKH,EAAL,KACJjD,SAAU,WACVkC,UAAW,wBACXmB,wBAAyB,gBACzBC,OAAQ,EACR7C,MAAO,GACPvB,OAAQ,GACRiD,OAAQ,UAERI,gBAAiB,SAEfY,EAAeJ,KAErB,yBACEQ,KAAK,SACLC,gBAAeZ,EACfa,gBAAeZ,EACfa,gBAAeV,EACf/D,MAAO,CACLmE,KAAK,GAAD,OAAKH,EAAL,KACJjD,SAAU,WACVkC,UAAW,wBACXoB,OAAQ,EACR7C,MAAO,GACPvB,OAAQ,GACRmD,aAAc,MACdsB,UAAW,qCACXpB,gBAAiBW,EAAW,OAAS,WA4DxC,SAASU,EAAT,GAAwC,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OAClC,OACE,6BACE,yBACE9E,MAAO,CACLe,SAAU,WACVgE,UAAW,GACXvD,MAAO,EACPvB,OAAQ,EACRqD,gBAAiB,mBACjBa,KAAK,GAAD,OAAKS,EAAKZ,QAAV,QAGR,yBACEhE,MAAO,CACLe,SAAU,WACVgE,UAAW,GACXC,SAAU,GACVC,UAAW,SACXC,WAAY,mBACZC,WAAW,GAAD,QAAO,IAAMN,EAAS,EAAtB,KACVrD,MAAM,GAAD,OAAK,IAAMqD,EAAX,KACLV,KAAK,GAAD,OAAKS,EAAKZ,QAAV,OAGLc,EAAOF,EAAKb,SAnErBN,EAAO2B,aAAe,CACpBnB,UAAU,GAkFZU,EAAKS,aAAe,CAClBN,OAAQ,SAAAO,GAAC,OAAIA,I,iDCtKXC,EAAc,CAClBvE,SAAU,WACVS,MAAO,QAGH+D,EAAQC,cACRC,EAAc,IAAIC,KAAK,cAEvB/B,EAAM8B,EACN7B,EAAM2B,EAGZ,SAASI,EAAWC,GAClB,OAAOd,YAAO,IAAIY,KAAKE,GAAK,UAK9B,IA+FeC,EA/FI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,eAAqB,EAE9B/G,mBAASyG,GAFqB,mBAElDO,EAFkD,KAE3CC,EAF2C,OAG1BjH,mBAASyG,GAHiB,mBAGzCS,GAHyC,aAI9BlH,oBAAS,GAJqB,mBAIlDmH,EAJkD,KAI3CC,EAJ2C,KAMzDjH,qBAAU,WACR,IAAMkH,EACLF,GAAUH,EAAOM,WAAaf,EAAMe,WAAcC,aAAY,WAC3DN,GAAU,SAAAD,GAAM,OAAEQ,YAAQR,EAAO,MACjCE,GAAY,SAAAO,GAAQ,OAAID,YAAQC,EAAS,MACzCV,IACAC,EAAOM,YAAcf,EAAMe,WAAaF,GAAU,SAAAD,GAAM,OAAI,OApBtD,KAsBV,OAAO,kBAAMO,cAAcL,MAC3B,CAACL,EAAOG,IAGV,IAOMQ,EAAYC,cACflD,OAAO,CAACC,EAAKC,IACbiD,MAAM,GACNlG,KAAI,SAAA0E,GAAC,OAAKA,KAEb,OAAO,yBAAK/D,MAAM,iBAChB,yBACEtB,MAAO,CACLwB,MAAO,OACPyD,UAAW,SACXC,WAAY,QACZ4B,OAAQ,IAGZ,4BAAKd,GAAUlB,YAAOkB,EAAQ,iBAE9B,kBAAC,IAAD,CACEe,UAAWzB,EACX5B,OAAQ,EAAEC,GAAMC,GAChBoD,KAAM,EACNhB,OAAQ,EAAEA,GACViB,KAzDS,MA0DTC,SA7Ba,SAAC,GAAU,IAATtB,EAAQ,oBACrBuB,EAAO,IAAIzB,KAAKE,GACpBM,EAAYiB,GACZlB,GAAU,SAAAD,GAAM,OAAImB,KACpBrB,EAAe,CAACF,MA2Bd,kBAAC,IAAD,MACG,gBAAGpC,EAAH,EAAGA,aAAH,OAAsB,kBAACD,EAAD,CAAYC,aAAcA,OAEnD,kBAAC,IAAD,MACG,gBAAG4D,EAAH,EAAGA,QAASlD,EAAZ,EAAYA,eAAZ,OACC,6BACGkD,EAAQzG,KAAI,SAAAkD,GAAM,OACjB,kBAACJ,EAAD,CACE3C,IAAK+C,EAAOC,GACZD,OAAQA,EACRH,OAAQ,EAAEC,GAAMC,GAChBM,eAAgBA,WAM1B,kBAAC,IAAD,CAAO8B,OAAQW,IACZ,gBAAGE,EAAH,EAAGA,MAAH,OACC,6BACGA,EAAMlG,KAAI,SAAAiE,GAAI,OACb,kBAACD,EAAD,CACE7D,IAAK8D,EAAKd,GACVc,KAAMA,EACNC,MAAOgC,EAAMQ,OACbvC,OAAQa,YAOpB,yBAAKrE,MAAQ,eACX,kBAACgG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAM,GACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAO1G,QAAW,WAAOoF,GAAU,SAAAD,GAAM,OAAI,OAA7D,SAEF,kBAACoB,EAAA,EAAD,CAAKC,GAAM,GACT,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAO1G,QAAW,WAAOoF,GAAU,SAAAD,GAAM,OAAI,OAA7D,cCvGJV,EAAc,IAAIC,KAAK,cAwFvBiC,EAAgB,SAAC1I,EAAU4B,EAAO4B,GACjCxD,EAASoI,OAAS,GACd5E,EAAK5B,IACR4B,EAAK5B,GAAO+G,QAAQC,eAAe,CAC/BC,SAAU,SACVC,MAAO,WAKJC,EAhGQ,SAAC1H,GAAW,IAAD,EACctB,qBADd,mBACvB8C,EADuB,KACPmG,EADO,OAGEjJ,mBAAS,IAHX,mBAGvBC,EAHuB,KAGbC,EAHa,OAKuBF,qBALvB,mBAKxBkJ,EALwB,KAKHC,EALG,OAOSnJ,mBAASyG,GAPlB,mBAOxB2C,EAPwB,KAOVC,EAPU,KAS1BC,EAAsB,GAEtB7F,EAAO,GACXtD,qBAAU,WACNC,MAAM,6FACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGN,EAAYM,EAAOC,SAKvB,SAACC,SAKV,IAEHP,qBAAU,WACNwI,EAAc1I,EAASiJ,EAAoBzF,MAE/CA,EAAOxD,EAASsJ,QAAO,SAACC,EAAK5H,EAAQC,GAEjC,OADA2H,EAAI3H,GAASlC,IAAM8J,YACZD,IACN,IA4BL,OAPAvJ,EAAS0B,KAAI,SAAC+H,EAAO7H,GACN,IAAI6E,KAAKgD,EAAOrH,YACnBiF,WAAa8B,EAAa9B,YAC9BgC,EAAsBA,EAAoBK,OAAOD,OAIlD,kBAACE,EAAA,EAAD,KACH,kBAACtB,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAKC,GAAI,IAAI,kBAAC,EAAD,CAAU3I,uBA9BK,SAAC+B,EAAQC,GACzCoH,EAAkBrH,GAClBuH,EAAuBtH,IA4ByD5B,SAAYqJ,GAA4CrJ,EAAU6C,eAAkBA,EAAgBW,KAAQA,KACxL,kBAAC8E,EAAA,EAAD,CAAKC,GAAI,GACJ1F,GACD,kBAAC,EAAD,CAAaZ,KAAMY,EAAeZ,KAAMC,QAASW,EAAeX,QAASC,KAAMU,EAAeV,KACjFC,WAAYS,EAAeT,eAGhD,kBAACiG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAM,IACP,kBAAC,EAAD,CAAcvI,SAAYqJ,GAA4CrJ,EAAUuD,mBAlCnE,SAAC5B,EAASC,GAC/BoH,EAAkBrH,GAClBuH,EAAuBtH,IAgCyG4B,KAAQA,EAAMX,eAAiBA,EAAgBY,kBAAqBwF,MAGpM,kBAACZ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAM,IACX,kBAACqB,EAAD,CAAY/C,eAlCG,SAAC,GAAU,IAATF,EAAQ,oBACzBuB,EAAO,IAAIzB,KAAKE,GACpByC,EAAgBlB,GAChBgB,OAAuBW,IA+B2B/C,eA5B/B,WACnBsC,GAAgB,SAAAD,GAAY,OAAI5B,YAAQ4B,EAAa,a,SChD9CW,MAdf,WACI,IAAMC,EAAW,CACbC,MAAQ,SAEZ,OACI,6BACI,wBAAIC,UAAY,aACZ,kBAAC,IAAD,CAAMC,GAAK,cAAcnJ,MAASgJ,GAAU,4FAC5C,kBAAC,IAAD,CAAMG,GAAK,gBAAgBnJ,MAASgJ,GAAU,oF,SC0C/CI,EAlDC,WAAO,IAAD,EACcpK,mBAAS,IADvB,mBACXqK,EADW,KACDC,EADC,KAMdC,EAAU,GAcd,OAbApK,qBAAU,WACNC,MAAM,iDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG8J,EAAY9J,MAEhB,SAACE,GACGZ,QAAQC,IAAIW,QAGzB,IACH6J,EAAUC,OAAOC,KAAKJ,GACf,yBAAKH,UAAY,cACpB,8GACA,kBAAC,IAAD,CACIQ,QAAS,CACLC,YAAY,GAEhBlK,KAAM,CACFmK,OAAQL,EAAQ5I,KAAI,SAACG,EAAID,GAAL,OAAgBA,EAtB1B,IAsBoD,GAAKA,IAAU0I,EAAQlC,OAAS,EAAKvG,EAAM,MACzG+I,SAAU,CAAC,CACPpK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,yDACPC,YA7BO,MA8BPC,MAAM,GACR,CACEvK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,4CACPC,YAjCG,SAkCHC,MAAM,GACR,CACEvK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,gDACPC,YArCG,QAsCHC,MAAM,SCSXC,EAnDI,WAAO,IAAD,EACWjL,mBAAS,IADpB,mBACdqK,EADc,KACJC,EADI,KAMjBC,EAAU,GAed,OAdApK,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG8J,EAAY9J,MAEhB,SAACE,GACGZ,QAAQC,IAAIW,QAGzB,IACH6J,EAAUC,OAAOC,KAAKJ,GACtBvK,QAAQC,IAAIwK,EAAQlC,QACb,yBAAK6B,UAAY,cACpB,mHACA,kBAAC,IAAD,CACIQ,QAAS,CACLC,YAAY,GAEhBlK,KAAM,CACFmK,OAAQL,EAAQ5I,KAAI,SAACG,EAAID,GAAL,OAAgBA,EAvB1B,IAuBoD,GAAKA,IAAU0I,EAAQlC,OAAS,EAAKvG,EAAM,MACzG+I,SAAU,CAAC,CACPpK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,iDACPC,YA9BO,MA+BPC,MAAM,GACR,CACEvK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,yCACPC,YAlCG,QAmCHC,MAAM,GACR,CACEvK,KAAM8J,EAAQ5I,KAAI,SAAAG,GAAG,OAAIuI,EAASvI,GAAK,MACvCgJ,MAAO,gDACPC,YAtCG,QAuCHC,MAAM,SCxBXE,EAfD,WACV,OAAO,kBAACtB,EAAA,EAAD,KACH,kBAACtB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAM,IACP,kBAAC,EAAD,QAGR,kBAACF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAM,IACP,kBAAC,EAAD,U,QCOD2C,MAhBf,WACI,OACI,kBAAC,IAAD,KACI,6BACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAO,UAAUC,OAAK,EAACC,UAAatC,IAC3C,kBAAC,IAAD,CAAOoC,KAAO,cAAcE,UAAatC,IACzC,kBAAC,IAAD,CAAOoC,KAAO,gBAAgBE,UAAaJ,QCJ3CK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9L,MAAK,SAAA+L,GACJA,EAAaC,gBAEdC,OAAM,SAAA5L,GACLZ,QAAQY,MAAMA,EAAM6L,c","file":"static/js/main.114500ad.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {compose, withProps} from \"recompose\"\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow} from \"react-google-maps\"\n\nconst CovidGoogleMap = ({onPatientMarkerClicked}) => {\n    console.log('Rendering CovidGoogleMap...');\n    const [patients, setPatients] = useState([]);\n    useEffect(() => {\n        fetch(\"https://maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setPatients(result.data);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    // setIsLoaded(true);\n                    // setError(error);\n                }\n            )\n    }, []);\n    const MyMapComponent = React.memo(compose(\n        withProps({\n            googleMapURL:\n                \"https://maps.googleapis.com/maps/api/js?key=AIzaSyCfrgza6UF7_rK2NsnuUQBytLTSbKYuAlA&libraries=geometry,drawing,places\",\n            loadingElement: <div style={{height: `100%`}}/>,\n            containerElement: <div style={{height: `600px`}}/>,\n            mapElement: <div style={{height: `100%`}}/>\n        }),\n        withScriptjs,\n        withGoogleMap\n    )((props)=> (\n        <GoogleMap defaultZoom={16} defaultCenter={{lat: 10.762913, lng: 106.6799884}}>\n            {patients.map((patient, index) => (<Marker key={index} position={{lat: patient.lat, lng: patient.lng}} onClick={()=>{\n                onPatientMarkerClicked(patient)}}>\n            </Marker>))}\n        </GoogleMap>\n    )));\n\n\n    return <MyMapComponent/>;\n}\nexport default React.memo(CovidGoogleMap);\n","import React, {useEffect, useState} from 'react';\nimport Card from \"react-bootstrap/Card\";\n\n\nconst PatientInfo = ({name, address, note, verifyDate}) => {\n    return <div class = \"info-card\">\n    <Card style={{ width: '18rem' }}>\n    <Card.Header><h2>Thông tin chi tiết bệnh nhân</h2></Card.Header>\n    <Card.Body>\n    <Card.Title>Tên bệnh nhân : {name}</Card.Title>\n      <Card.Text>\n        <ul>\n            <li>{address}</li>\n            <li>{note}</li>\n            <li>{verifyDate}</li>\n        </ul>\n      </Card.Text>\n    </Card.Body>\n  </Card>\n  </div>\n};\n\nexport default PatientInfo;","import React, {useEffect, useState} from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst CovidMap = ({onPatientMarkerClicked,patients,currentPatient}) => {\n    let defaultZoom = 8; \n    let defaultLat = 10.762887; \n    let defaultLng = 106.6800684; \n    return <Map center={[currentPatient ? currentPatient.lat : defaultLat,currentPatient ? currentPatient.lng : defaultLng]} zoom={defaultZoom}>\n        <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.osm.org/{z}/{x}/{y}.png   \"\n        />\n        {patients.map((patient,index) => <Marker position={[patient.lat, patient.lng]} onClick={() => {onPatientMarkerClicked(patient,index)}}>\n            <Popup>\n                <ul>\n                    <li>Name: {patient.name}</li>\n                    <li>Address: {patient.address}</li>\n                    <li>Note: {patient.note}</li>\n                    <li>Verify date: {patient.verifyDate}</li>\n                </ul>\n            </Popup>\n        </Marker>)}\n    </Map>;\n};\n\nexport default CovidMap;\n","import React, {useEffect, useState,useRef} from 'react';\r\nimport { ListGroup } from 'react-bootstrap';\r\n\r\nconst ListPatients = ({patients,onClickItemPatient,refs,indexClickedMaker}) =>{\r\n    return <ListGroup class = \"list-group\" as = \"ul\">\r\n    {patients && patients.map((patient,index) =>{  \r\n        return(\r\n        <ListGroup.Item key = {index} as = \"li\" ref={refs[index]} onClick = {() => {\r\n            onClickItemPatient(patient,index); \r\n        }} active = {index === indexClickedMaker ? true : false}><ul>\r\n            <li>{patient.name}</li> \r\n            <li>{patient.address}</li>\r\n            <li>{patient.note}</li>\r\n            <li>{patient.verifyDate}</li>   \r\n        </ul>\r\n        </ListGroup.Item>\r\n        )\r\n    }) \r\n    }\r\n    </ListGroup>\r\n}\r\n\r\nexport default ListPatients; ","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst railOuterStyle = {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: 40,\r\n    transform: \"translate(0%, -50%)\",\r\n    cursor: \"pointer\"\r\n    // border: \"1px solid grey\"\r\n  };\r\n  \r\n  const railInnerStyle = {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: 8,\r\n    transform: \"translate(0%, -50%)\",\r\n    borderRadius: 4,\r\n    pointerEvents: \"none\",\r\n    backgroundColor: \"rgb(155,155,155)\"\r\n  };\r\n\r\n  export function SliderRail({ getRailProps }) {\r\n    return (\r\n      <Fragment>\r\n        <div style={railOuterStyle} {...getRailProps()} />\r\n        <div style={railInnerStyle} />\r\n      </Fragment>\r\n    );\r\n  }\r\n  \r\n  SliderRail.propTypes = {\r\n    getRailProps: PropTypes.func.isRequired\r\n  };\r\n\r\n  export function Handle({\r\n    domain: [min, max],\r\n    handle: { id, value, percent },\r\n    disabled,\r\n    getHandleProps\r\n  }) {\r\n    return (\r\n      <Fragment>\r\n        <div\r\n          style={{\r\n            left: `${percent}%`,\r\n            position: \"absolute\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            WebkitTapHighlightColor: \"rgba(0,0,0,0)\",\r\n            zIndex: 5,\r\n            width: 24,\r\n            height: 42,\r\n            cursor: \"pointer\",\r\n            // border: \"1px solid white\",\r\n            backgroundColor: \"none\"\r\n          }}\r\n          {...getHandleProps(id)}\r\n        />\r\n        <div\r\n          role=\"slider\"\r\n          aria-valuemin={min}\r\n          aria-valuemax={max}\r\n          aria-valuenow={value}\r\n          style={{\r\n            left: `${percent}%`,\r\n            position: \"absolute\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            zIndex: 2,\r\n            width: 20,\r\n            height: 20,\r\n            borderRadius: \"50%\",\r\n            boxShadow: \"1px 1px 1px 1px rgba(0, 0, 0, 0.3)\",\r\n            backgroundColor: disabled ? \"#666\" : \"#333\"\r\n          }}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n  \r\n  Handle.propTypes = {\r\n    domain: PropTypes.array.isRequired,\r\n    handle: PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired,\r\n      percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    getHandleProps: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool\r\n  };\r\n\r\n  Handle.defaultProps = {\r\n    disabled: false\r\n  };\r\n\r\n  export function Track({ source, target, getTrackProps, disabled }) {\r\n    return (\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          transform: \"translate(0%, -50%)\",\r\n          height: 8,\r\n          zIndex: 1,\r\n          backgroundColor: disabled ? \"#999\" : \"#444\",\r\n          borderRadius: 4,\r\n          cursor: \"pointer\",\r\n          left: `${source.percent}%`,\r\n          width: `${target.percent - source.percent}%`\r\n        }}\r\n        {...getTrackProps()}\r\n      />\r\n    );\r\n  }\r\n  \r\n  Track.propTypes = {\r\n    source: PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired,\r\n      percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    target: PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired,\r\n      percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    getTrackProps: PropTypes.func.isRequired,\r\n    disabled: PropTypes.bool\r\n  };\r\n  \r\n  Track.defaultProps = {\r\n    disabled: false\r\n  };\r\n\r\n  export function Tick({ tick, count, format }) {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            marginTop: 14,\r\n            width: 1,\r\n            height: 5,\r\n            backgroundColor: \"rgb(200,200,200)\",\r\n            left: `${tick.percent}%`\r\n          }}\r\n        />\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            marginTop: 22,\r\n            fontSize: 10,\r\n            textAlign: \"center\",\r\n            fontFamily: \"Arial, san-serif\",\r\n            marginLeft: `${-(100 / count) / 2}%`,\r\n            width: `${100 / count}%`,\r\n            left: `${tick.percent}%`\r\n          }}\r\n        >\r\n          {format(tick.value)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  Tick.propTypes = {\r\n    tick: PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      value: PropTypes.number.isRequired,\r\n      percent: PropTypes.number.isRequired\r\n    }).isRequired,\r\n    count: PropTypes.number.isRequired,\r\n    format: PropTypes.func.isRequired\r\n  };\r\n  \r\n  Tick.defaultProps = {\r\n    format: d => d\r\n  };","import React, { useState,useEffect } from 'react';\r\nimport { Slider, Rail, Handles, Ticks } from \"react-compound-slider\";\r\nimport { SliderRail, Handle, Tick } from \"./your-local-slider-components\";\r\nimport { subDays, startOfToday, format, addDays } from \"date-fns\";\r\nimport { Button, Row,Col } from 'react-bootstrap';\r\nimport { scaleTime } from \"d3-scale\";\r\nimport { ms } from 'date-fns/locale';\r\n\r\nconst sliderStyle = {\r\n  position: \"relative\",\r\n  width: \"100%\"\r\n};\r\n\r\nconst today = startOfToday();\r\nconst constantDay = new Date(\"2019-12-19\");\r\nconst oneDay = 86400000;\r\nconst min = constantDay;\r\nconst max = today;\r\nconst speed = 500; \r\n\r\nfunction formatTick(ms) {\r\n  return format(new Date(ms), \"MMM dd\");\r\n}\r\n\r\n\r\n\r\nconst SliderDate = ({ onChangeSlider, addDaySelected }) => {\r\n  \r\n  const [values,SetValues] = useState(constantDay); \r\n  const [selected,setSelected] = useState(constantDay); \r\n  const [isPlay,setIsPlay] = useState(false); \r\n\r\n  useEffect(() => {\r\n    const timer =\r\n    (isPlay && values.getTime() <= today.getTime()) && setInterval(() => {\r\n        SetValues(values=>addDays(values,1));\r\n        setSelected(selected => addDays(selected,1));   \r\n        addDaySelected();   \r\n        values.getTime() === today.getTime() && setIsPlay(isPlay => false); \r\n    }, speed);\r\n    return () => clearInterval(timer);\r\n  },[values,isPlay])\r\n\r\n\r\n  const onChange = ([ms]) => {\r\n    let date = new Date(ms);\r\n    setSelected(date); \r\n    SetValues(values => date); \r\n    onChangeSlider([ms]); \r\n  }\r\n\r\n  const dateTicks = scaleTime()\r\n    .domain([min, max])\r\n    .ticks(8)\r\n    .map(d => +d);\r\n\r\n  return <div class=\"slider-center\">\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n        fontFamily: \"Arial\",\r\n        margin: 5\r\n      }}\r\n    >\r\n    <h1>{values && format(values, \"MMM dd yyyy\")}</h1>\r\n    </div>\r\n    <Slider\r\n      rootStyle={sliderStyle}\r\n      domain={[+min, +max]} // [min, max]\r\n      mode={1}\r\n      values={[+values]} // slider values\r\n      step={oneDay}\r\n      onChange={onChange}\r\n    >\r\n      <Rail>\r\n        {({ getRailProps }) => <SliderRail getRailProps={getRailProps} />}\r\n      </Rail>\r\n      <Handles>\r\n        {({ handles, getHandleProps }) => (\r\n          <div>\r\n            {handles.map(handle => (\r\n              <Handle\r\n                key={handle.id}\r\n                handle={handle}\r\n                domain={[+min, +max]}\r\n                getHandleProps={getHandleProps}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </Handles>\r\n      <Ticks values={dateTicks}>\r\n        {({ ticks }) => (\r\n          <div>\r\n            {ticks.map(tick => (\r\n              <Tick\r\n                key={tick.id}\r\n                tick={tick}\r\n                count={ticks.length}\r\n                format={formatTick}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </Ticks>\r\n    </Slider>\r\n    <div class = \"button-play\">\r\n      <Row>\r\n        <Col xs = {2}>\r\n          <Button variant=\"dark\" onClick = {() => {setIsPlay(isPlay => true)}}>Play</Button>\r\n        </Col>\r\n        <Col xs = {2}>\r\n          <Button variant=\"dark\" onClick = {() => {setIsPlay(isPlay => false)}}>Pause</Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n\r\nexport default SliderDate; ","import React, {useEffect, useState ,useRef} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport CovidGoogleMap from \"./CovidGoogleMap\";\nimport PatientInfo from \"./PatientInfo\";\nimport Container from \"react-bootstrap/Container\";\nimport CovidMap from \"./CovidMap\";\nimport ListPatients from \"./ListPatients\";\nimport SliderDate from './Slider'; \nimport { subDays, startOfToday, format,addDays, getDate} from \"date-fns\";\nconst constantDay = new Date(\"2019-12-19\");\n\nconst CovidDashboard = (props) => {\n    const [currentPatient, setCurrentPatient] = useState();\n\n    const [patients, setPatients] = useState([]);\n\n    const[indexPatientClicked, setIndexPatientClicked] = useState();\n\n    const[selectedDate, setSelectedDate] = useState(constantDay); \n    \n    let listPatientSelected = []; \n\n    let refs = [];\n    useEffect(() => {\n        fetch(\"http://cors-anywhere.herokuapp.com/http://maps.vnpost.vn/apps/covid19/api/patientapi/list\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    setPatients(result.data);\n                },\n                // Note: it's important to handle errors here\n                // instead of a catch() block so that we don't swallow\n                // exceptions from actual bugs in components.\n                (error) => {\n                    // setIsLoaded(true);\n                    // setError(error);\n                }\n            )\n    }, []\n    )\n    useEffect(() => {\n        setScrollList(patients,indexPatientClicked,refs);\n    })\n    refs = patients.reduce((acc, patient,index) => {\n        acc[index] = React.createRef();\n        return acc;\n      }, {});\n    const patientMarkerClickedHandler = (patient,index) => {\n        setCurrentPatient(patient);\n        setIndexPatientClicked(index); \n    }\n\n    const clickItemPatient = (patient, index) => {\n        setCurrentPatient(patient); \n        setIndexPatientClicked(index); \n    }\n\n    const onChangeSlider = ([ms]) => {\n        let date = new Date(ms);   \n        setSelectedDate(date);  \n        setIndexPatientClicked(undefined); \n    }\n\n    const addDaySelected = () => {\n        setSelectedDate(selectedDate => addDays(selectedDate,1)); \n    }\n\n    patients.map((patien,index) => {\n        let date = new Date(patien.verifyDate); \n        if(date.getTime() <= selectedDate.getTime()){\n            listPatientSelected = listPatientSelected.concat(patien);    \n        }\n    })\n\n    return <Container>\n        <Row>\n         \n            <Col xs={10}><CovidMap onPatientMarkerClicked={patientMarkerClickedHandler} patients = {listPatientSelected ? listPatientSelected : patients} currentPatient = {currentPatient} refs = {refs}/></Col>\n            <Col xs={2}>\n                {currentPatient &&\n                <PatientInfo name={currentPatient.name} address={currentPatient.address} note={currentPatient.note}\n                             verifyDate={currentPatient.verifyDate}/>}\n            </Col>\n        </Row>\n        <Row>\n            <Col xs = {10}>\n                <ListPatients patients = {listPatientSelected ? listPatientSelected : patients} onClickItemPatient = {clickItemPatient} refs = {refs} currentPatient ={currentPatient} indexClickedMaker = {indexPatientClicked}/>\n            </Col>\n        </Row>\n        <Row>\n            <Col xs = {10}>\n            <SliderDate onChangeSlider = {onChangeSlider} addDaySelected = {addDaySelected}/>\n            </Col>\n        </Row>\n    </Container>\n};\n\nconst setScrollList = (patients, index, refs) => {\n    if(patients.length > 0){\n        if(refs[index]){\n        refs[index].current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\"});\n        }\n    }\n}\n\nexport default CovidDashboard;","import React from 'react'; \r\nimport {Link, withRouter} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n    const navStyle = {\r\n        color : 'white'\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className = \"nav-links\">\r\n                <Link to = '/giuaky/map' style = {navStyle}><li>Bản đồ bệnh nhân Covid Việt Nam</li></Link>\r\n                <Link to = '/giuaky/stats' style = {navStyle}><li>Biểu đồ số ca mắc Covid</li></Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst ChartVN = () => {\r\n    const [listDate, setlistDate] = useState([]);\r\n    const infectionColor = 'red'; \r\n    const doubtColor = 'violet'; \r\n    const curedColor = 'green'; \r\n    const distanceLabel = 6; \r\n    let arrKeys = [];\r\n    useEffect(() => {\r\n        fetch(\"https://td.fpt.ai/corona/corona-chart-vn.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setlistDate(result);\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n    }, []);\r\n    arrKeys = Object.keys(listDate);\r\n    return <div className = \"chart-card\">\r\n        <h1>Biểu đồ bệnh nhân nhiễm covid ở Việt Nam</h1>\r\n        <Line\r\n            options={{\r\n                responsive: true\r\n            }}\r\n            data={{\r\n                labels: arrKeys.map((key,index) => (index % distanceLabel === 0 || index === arrKeys.length - 1) ? key : ''),\r\n                datasets: [{\r\n                    data: arrKeys.map(key => listDate[key][0]),\r\n                    label: \"Số bệnh nhân nhân nhiễm bệnh\",\r\n                    borderColor: infectionColor,\r\n                    fill: true\r\n                },{\r\n                    data: arrKeys.map(key => listDate[key][1]),\r\n                    label: \"Số bệnh nhân nghi nhiễm\",\r\n                    borderColor: doubtColor,\r\n                    fill: true\r\n                },{\r\n                    data: arrKeys.map(key => listDate[key][2]),\r\n                    label: \"Số bệnh nhân khỏi bệnh\",\r\n                    borderColor: curedColor,\r\n                    fill: true\r\n                }]\r\n            }\r\n            }\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default ChartVN; ","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst Charttotal = () => {\r\n    const [listDate, setlistDate] = useState([]);\r\n    const infectionColor = 'red'; \r\n    const deathColor = 'black'; \r\n    const curedColor = 'green'; \r\n    const distanceLabel = 6; \r\n    let arrKeys = [];\r\n    useEffect(() => {\r\n        fetch(\"https://td.fpt.ai/corona/corona-total.json\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    setlistDate(result);\r\n                },\r\n                (error) => {\r\n                    console.log(error);\r\n                }\r\n            )\r\n    }, []);\r\n    arrKeys = Object.keys(listDate);\r\n    console.log(arrKeys.length); \r\n    return <div className = \"chart-card\">\r\n        <h1>Biểu đồ bệnh nhân nhiễm covid ở Thế giới</h1>\r\n        <Line\r\n            options={{\r\n                responsive: true\r\n            }}\r\n            data={{\r\n                labels: arrKeys.map((key,index) => (index % distanceLabel === 0 || index === arrKeys.length - 1) ? key : ''),\r\n                datasets: [{\r\n                    data: arrKeys.map(key => listDate[key][0]),\r\n                    label: \"Số bệnh nhân nhiễm bệnh\",\r\n                    borderColor: infectionColor,\r\n                    fill: true\r\n                },{\r\n                    data: arrKeys.map(key => listDate[key][1]),\r\n                    label: \"Số bệnh nhân tử vong\",\r\n                    borderColor: deathColor,\r\n                    fill: true\r\n                },{\r\n                    data: arrKeys.map(key => listDate[key][2]),\r\n                    label: \"Số bệnh nhân khỏi bệnh\",\r\n                    borderColor: curedColor,\r\n                    fill: true\r\n                }]\r\n            }\r\n            }\r\n        />\r\n    </div>\r\n}\r\n\r\nexport default Charttotal; ","import React, {useEffect, useState ,useRef} from 'react';\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ChartVN from \"./ChartVN\";\r\nimport Charttotal from \"./Charttotal\";\r\n\r\nconst Stats = () => {\r\n    return <Container>\r\n        <Row>\r\n            <Col xs = {12}>\r\n                <ChartVN />\r\n            </Col>\r\n        </Row>\r\n        <Row>\r\n            <Col xs = {12}>\r\n                <Charttotal />\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n}\r\n\r\nexport default Stats;","import React from 'react';\nimport './App.css';\nimport CovidDashboard from \"./components/CovidDashboard\";\nimport Nav from \"./components/Nav\";\nimport Stats from \"./components/Stats\"; \nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <Router>\n            <div>\n                <Nav />\n                <Switch>\n                    {/* <Route path = \"/\" exact component = {CovidDashboard} /> */}\n                    <Route path = \"/giuaky\" exact component = {CovidDashboard} />\n                    <Route path = \"/giuaky/map\" component = {CovidDashboard} />\n                    <Route path = \"/giuaky/stats\" component = {Stats} />\n                </Switch>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// require('./mocks');\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}